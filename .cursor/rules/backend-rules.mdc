## Rules to Follow

[Configuration Management]
 - Use Pydantic Settings in `core/config.py` for every environment variable (WhatsApp tokens, Mongo URI, session timeouts, department thresholds, log levels).  
 - Expose all changeable behavior (chat-expiry, department timeouts, AI thresholds) via settings so no code changes are needed for tweaks.

[Commenting]
 - Never address the developer in comments; only include concise explanations at complex or non-obvious parts (function/class docstrings).

[Code Structure & Organization]
 - Encapsulate business logic in service classes under `app/services/` (e.g., `ConversationService`, `NotificationService`).  
 - Place reusable helpers in `app/utils/<feature>/`; group routes by feature in `app/routes/<feature>/`.  
 - Avoid files >300 lines; split large features into multiple, well-named modules.

[Validation & Schemas]
 - Validate **all** incoming data with Pydantic request schemas under `db/schemas/<feature>_in.py`; enforce strict types.  
 - Define output schemas in `db/schemas/<feature>_out.py` and bind them to endpoints so `/docs` remains accurate.  
 - Model **every** MongoDB collection with a Pydantic model in `db/models/<feature>.py` for clear mapping of DB records.

[Error Handling & Logging]
 - Wrap endpoint code in `try/except`; on exception, log full details via `core/logger.py` and return a sanitized error response.  
 - Centralize error codes and user-friendly messages in `config/error_code.py`; reference these codes in all HTTPExceptions.  
 - Document possible HTTP status codes and error payloads for each route in `docs/errors/`, integrated with OpenAPI.

[Security & Access Control]
 - Secure endpoints with JWT auth and enforce RBAC via FastAPI dependencies.  
 - Never expose raw exception traces to clients; only generic messages.  
 - Sanitize and validate every input to prevent injections.

[API Documentation]
 - Write clear FastAPI docstrings for each endpoint, parameter, and response model so `/docs` (Swagger UI) is comprehensive.  
 - After each feature, update `README.md` with new endpoints, usage examples, and required env vars.

[Audit Trail]
 - Log every chat activity—transfers, notes, participant changes—to an `audit_logs` collection via a dedicated service, including timestamps and user IDs.

[Media Handling]
 - Implement media upload and retrieval endpoints that support WhatsApp media types (images, audio, video, documents) within official size limits; render metadata consistently.

[Data Persistence & History]
 - Persist chat sessions indefinitely in MongoDB; provide service-layer methods to fetch historical conversations and participant history for any client.

[Docker & Dependencies]
 - After modifying dependencies, run automated checks to confirm `Dockerfile` and `docker-compose.yml` continue to build and deploy correctly.

[Documentation Maintenance]
 - Whenever a change, new feature, or structural update is made that affects documentation, always update the relevant files: `README.md`, `WEBHOOK_SETUP_GUIDE.md`, and `WHATSAPP_SETUP_GUIDE.md` to ensure they remain accurate and up to date.

[Index Maintenance]
 - Whenever you add, remove, or modify MongoDB models or make structural changes to the database, update the indexes in `app/db/client.py` accordingly. Ensure new fields are indexed as needed for performance, and remove or adjust indexes that are no longer required or could cause conflicts.

[File & Folder Organization]
 - Place new models in the appropriate subfolder under `app/db/models/` based on their feature or domain. If a relevant subfolder does not exist, create a new one.
 - Place new request and response schemas in the correct subfolder under `app/schemas/` according to their feature or endpoint. Create a new subfolder if needed.
 - Place new route files in the appropriate subfolder under `app/api/routes/` by feature. If a suitable subfolder does not exist, create one.

[Route File Size & Specificity]
 - Each route file in `app/api/routes/` should contain only one endpoint. Avoid large files with multiple endpoints; instead, create more specific route files under the correct subfolder to keep files small and focused.
