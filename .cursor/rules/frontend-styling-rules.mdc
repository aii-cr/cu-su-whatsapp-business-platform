---
alwaysApply: false
---

# Frontend Styling & JSX Rules - Professional Next.js Standards

*Essential patterns for professional Next.js/React development with light/dark theme compatibility and modern UI/UX practices.*

## üé® **Design System & Theming (MANDATORY)**

### **CSS Variables for Theme Compatibility**
```css
/* Always use these CSS variables in globals.css */
:root {
  --primary: 37 99 235;
  --primary-foreground: 255 255 255;
  --background: 255 255 255;
  --foreground: 15 23 42;
  --muted: 241 245 249;
  --muted-foreground: 100 116 139;
  --border: 226 232 240;
  --success: 5 150 105;
  --warning: 217 119 6;
  --error: 220 38 38;
}

.dark {
  --primary: 59 130 246;
  --primary-foreground: 15 23 42; /* Dark text for AA compliance */
  --background: 15 23 42;
  --foreground: 248 250 252;
  --muted: 51 65 85;
  --muted-foreground: 148 163 184;
  --border: 51 65 85;
  --success: 16 185 129;
  --warning: 245 158 11;
  --error: 239 68 68;
}
```

### **Color Usage Patterns**
```typescript
// ‚úÖ CORRECT - Use CSS variables for theme compatibility
className={cn(
  'bg-background text-foreground border-border',
  'hover:bg-accent hover:text-accent-foreground',
  'focus:ring-2 focus:ring-ring focus:border-transparent'
)}

// ‚ùå WRONG - Hard-coded colors
className="bg-white text-black border-gray-300"
```

## üèóÔ∏è **Component Structure Standards**

### **Professional Component Template**
```typescript
/**
 * Professional ComponentName component - brief description
 * Features: light/dark theme support, accessibility
 */

import * as React from 'react';
import { Icon1, Icon2 } from 'lucide-react'; // Always use Lucide icons
import { cn } from '@/lib/utils';

export interface ComponentNameProps {
  children?: React.ReactNode;
  className?: string;
  disabled?: boolean;
  size?: 'sm' | 'md' | 'lg';
}

export function ComponentName({
  children,
  className,
  disabled = false,
  size = 'md',
  ...props
}: ComponentNameProps) {
  const [isOpen, setIsOpen] = React.useState(false);
  
  const handleClick = React.useCallback(() => {
    if (!disabled) setIsOpen(true);
  }, [disabled]);

  const sizeClasses = {
    sm: 'h-8 text-sm px-2',
    md: 'h-10 text-sm px-3', 
    lg: 'h-12 text-base px-4',
  };

  return (
    <div className={cn('relative w-full', className)}>
      {/* Component content */}
    </div>
  );
}
```

## üéØ **Interactive Elements**

### **Professional Button Patterns**
```typescript
// Primary action button with loading state
<Button onClick={handleAction} disabled={isLoading} className="flex items-center gap-2">
  {isLoading ? (
    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
  ) : (
    <Plus className="h-4 w-4" />
  )}
  Create New
</Button>

// Secondary action button
<Button variant="outline" onClick={handleCancel} className="flex items-center gap-2">
  <X className="h-4 w-4" />
  Cancel
</Button>
```

### **Professional Input Patterns**
```typescript
// Input with icon and clear button
<div className="relative">
  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
  <Input ref={inputRef} className="pl-10 pr-10" placeholder="Search..." />
  {query && (
    <button onClick={handleClear} className="absolute right-3 top-1/2 transform -translate-y-1/2">
      <X className="h-4 w-4 text-muted-foreground hover:text-foreground" />
    </button>
  )}
</div>
```

## üé® **Visual Design Patterns**

### **Professional Tag/Chip Design**
```typescript
export function ProfessionalTag({ tag, onRemove }: TagProps) {
  return (
    <div className="inline-flex items-center gap-1.5 px-2.5 py-1 rounded-full bg-primary/10 text-primary text-sm border border-primary/20">
      <div className="w-2 h-2 rounded-full flex-shrink-0" style={{ backgroundColor: tag.color }} />
      <span className="font-medium">{tag.name}</span>
      {onRemove && (
        <button onClick={() => onRemove(tag.id)} className="hover:bg-primary/20 rounded-full p-0.5 transition-colors ml-1">
          <X className="h-3 w-3" />
        </button>
      )}
    </div>
  );
}
```

### **Professional Loading States**
```typescript
// Inline loading with spinner
{isLoading && (
  <div className="flex items-center justify-center py-4">
    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
    <span className="ml-2 text-sm text-muted-foreground">Loading...</span>
  </div>
)}

// Skeleton loading
<div className="space-y-3">
  <div className="h-4 bg-muted rounded animate-pulse"></div>
  <div className="h-4 bg-muted rounded animate-pulse w-3/4"></div>
</div>
```

### **Professional Empty States**
```typescript
export function EmptyState({ icon: Icon, title, description, action }: EmptyStateProps) {
  return (
    <div className="text-center py-8">
      <Icon className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
      <h3 className="text-lg font-medium text-foreground mb-2">{title}</h3>
      <p className="text-sm text-muted-foreground mb-4">{description}</p>
      {action && (
        <Button onClick={action.onClick} className="flex items-center gap-2">
          <action.icon className="h-4 w-4" />
          {action.label}
        </Button>
      )}
    </div>
  );
}
```

## üèóÔ∏è **Modal & Dialog Patterns**

### **Professional Modal Structure**
```typescript
export function ProfessionalModal({ open, onOpenChange, children }: ModalProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className={cn('sm:max-w-3xl lg:max-w-4xl w-full max-h-[95vh] overflow-hidden flex flex-col relative z-[1000]')}>
        {/* Header - Always fixed */}
        <DialogHeader className="flex-shrink-0">
          <DialogTitle>Modal Title</DialogTitle>
          <DialogDescription>Modal description</DialogDescription>
        </DialogHeader>

        {/* Content - Scrollable */}
        <div className="flex-1 overflow-y-auto flex flex-col space-y-6 p-6">
          {children}
        </div>

        {/* Footer - Always fixed */}
        <div className="flex-shrink-0 flex items-center justify-end gap-3 pt-4 border-t p-6">
          <Button variant="outline" onClick={onCancel}>Cancel</Button>
          <Button onClick={onConfirm}>Confirm</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
```

### **Professional Dropdown/Typeahead Structure**
```typescript
export function ProfessionalTypeahead({ ... }: TypeaheadProps) {
  const [isOpen, setIsOpen] = React.useState(false);
  const inputRef = React.useRef<HTMLInputElement>(null);
  const dropdownRef = React.useRef<HTMLDivElement>(null);

  return (
    <div className="relative w-full">
      {/* Input with icon */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input ref={inputRef} className="pl-10 pr-10" placeholder="Search..." />
      </div>

      {/* Dropdown with proper z-index */}
      {isOpen && (
        <div ref={dropdownRef} className="absolute z-[9999] w-full mt-2 bg-background border border-border rounded-lg shadow-lg max-h-80 overflow-hidden">
          {/* Loading state */}
          {isLoading && (
            <div className="flex items-center justify-center py-6">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
              <span className="ml-3 text-sm text-muted-foreground">Loading...</span>
            </div>
          )}

          {/* Content */}
          <div className="max-h-80 overflow-y-auto">
            {/* Header */}
            <div className="px-4 py-2 text-xs font-medium text-muted-foreground border-b border-border bg-muted/30">
              Results
            </div>

            {/* Items */}
            {items.map((item) => (
              <button key={item.id} className="w-full px-4 py-3 text-left hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none flex items-center gap-3 transition-colors border-b border-border/50 last:border-b-0">
                <div className="flex-1 min-w-0">
                  <div className="font-medium truncate">{item.name}</div>
                  <div className="text-xs text-muted-foreground">{item.description}</div>
                </div>
                <Check className="h-4 w-4 text-primary opacity-0 group-hover:opacity-100 transition-opacity" />
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
```

## üîß **Icon Usage Standards**

### **Lucide React Icons (MANDATORY)**
```typescript
// ‚úÖ ALWAYS use Lucide React icons for consistency
import { 
  Search, Plus, X, Tag, Check, 
  ChevronDown, ChevronUp, ArrowRight,
  Settings, User, Bell, Home, Calendar,
  FileText, Image, Video, Music, Download,
  Upload, Edit, Trash, Copy, Share, Lock,
  Eye, EyeOff, Heart, Star, Flag, Bookmark
} from 'lucide-react';

// Icon placement patterns
<Search className="h-4 w-4 text-muted-foreground" />
<Plus className="h-4 w-4 text-primary" />
<X className="h-4 w-4 text-destructive" />

// Icon with text alignment
<div className="flex items-center gap-2">
  <Tag className="h-4 w-4" />
  <span>Tag Management</span>
</div>
```

## üì± **Responsive Design Patterns**

### **Size Classes Pattern**
```typescript
const sizeClasses = {
  sm: { input: 'h-8 text-sm', button: 'h-8 px-2 text-sm', icon: 'h-3 w-3' },
  md: { input: 'h-10 text-sm', button: 'h-10 px-3 text-sm', icon: 'h-4 w-4' },
  lg: { input: 'h-12 text-base', button: 'h-12 px-4 text-base', icon: 'h-5 w-5' },
};
```

### **Modal Responsive Patterns**
```typescript
<DialogContent className={cn('w-full max-h-[95vh] overflow-hidden flex flex-col sm:max-w-lg md:max-w-2xl lg:max-w-3xl xl:max-w-4xl relative z-[1000]')}>
  <div className="flex-1 overflow-y-auto flex flex-col space-y-6 p-4 sm:p-6">
    {children}
  </div>
</DialogContent>
```

## üé® **Color Palette Standards**

### **Tag Color Palette**
```typescript
const TAG_COLORS = [
  '#2563eb', '#dc2626', '#059669', '#d97706', '#7c3aed', '#db2777', '#0891b2', '#65a30d',
  '#ea580c', '#be185d', '#7c2d12', '#1e40af', '#991b1b', '#166534', '#92400e', '#581c87',
];
```

### **Status Color Patterns**
```typescript
// Success states
className="text-success bg-success/10 border-success/20"

// Warning states  
className="text-warning bg-warning/10 border-warning/20"

// Error states
className="text-error bg-error/10 border-error/20"

// Info states
className="text-primary bg-primary/10 border-primary/20"
```

## üîß **Performance & Best Practices**

### **State Management Patterns**
```typescript
// ‚úÖ Use useCallback for event handlers
const handleClick = React.useCallback(() => {
  if (!disabled) setIsOpen(true);
}, [disabled]);

// ‚úÖ Use useMemo for expensive computations
const filteredItems = React.useMemo(() => {
  return items.filter(item => item.name.toLowerCase().includes(query.toLowerCase()));
}, [items, query]);

// ‚úÖ Debounce search queries
const [debouncedQuery, setDebouncedQuery] = React.useState('');
React.useEffect(() => {
  const timer = setTimeout(() => setDebouncedQuery(query), 300);
  return () => clearTimeout(timer);
}, [query]);
```

### **Accessibility Patterns**
```typescript
// ‚úÖ Always include proper ARIA labels
<button aria-label={`Remove ${item.name}`} onClick={() => onRemove(item.id)}>
  <X className="h-4 w-4" />
</button>

// ‚úÖ Keyboard navigation support
const handleKeyDown = React.useCallback((e: React.KeyboardEvent) => {
  if (e.key === 'Escape') setIsOpen(false);
  else if (e.key === 'Enter') { e.preventDefault(); handleSelect(); }
}, [handleSelect]);

// ‚úÖ Focus management
React.useEffect(() => {
  if (isOpen) inputRef.current?.focus();
}, [isOpen]);
```

## üéØ **File Organization Standards**

### **Component File Structure**
```
src/features/feature-name/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.tsx          # Main component
‚îÇ   ‚îî‚îÄ‚îÄ index.ts                   # Exports
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useComponentName.ts        # Custom hooks
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ componentNameApi.ts        # API functions
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ componentName.ts           # Types & schemas
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îî‚îÄ‚îÄ index.ts                       # Feature exports
```

### **Import Order Standards**
```typescript
// 1. React and core libraries
import * as React from 'react';
import { useState, useCallback, useEffect } from 'react';

// 2. Third-party libraries
import { cn } from '@/lib/utils';
import { useQuery } from '@tanstack/react-query';

// 3. UI components
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';

// 4. Icons
import { Plus, X, Search } from 'lucide-react';

// 5. Local imports
import { ComponentProps } from './types';
import { useComponentHook } from '../hooks/useComponentHook';
```

## üöÄ **Implementation Checklist**

When creating new components, ensure:

- [ ] ‚úÖ Uses proper TypeScript interfaces
- [ ] ‚úÖ Implements light/dark theme compatibility
- [ ] ‚úÖ Includes proper loading states
- [ ] ‚úÖ Has error handling
- [ ] ‚úÖ Uses Lucide React icons
- [ ] ‚úÖ Implements keyboard navigation
- [ ] ‚úÖ Has proper ARIA labels
- [ ] ‚úÖ Uses useCallback for event handlers
- [ ] ‚úÖ Implements responsive design
- [ ] ‚úÖ Has proper z-index management
- [ ] ‚úÖ Uses CSS variables for theming
- [ ] ‚úÖ Includes proper focus management
- [ ] ‚úÖ Has smooth transitions/animations
- [ ] ‚úÖ Implements proper empty states
- [ ] ‚úÖ Uses semantic HTML structure

## üé® **Animation & Transition Patterns**

### **Smooth Transitions**
```typescript
// Hover effects
className="transition-all duration-200 hover:scale-105 active:scale-95"

// Color transitions
className="transition-colors duration-200 hover:bg-accent"

// Opacity transitions
className="transition-opacity duration-200 opacity-0 group-hover:opacity-100"
```

### **Loading Animations**
```typescript
// Spinner animation
className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"

// Pulse animation
className="animate-pulse bg-muted rounded"
```

## ‚ùå **Anti-Patterns to Avoid**

### **Styling Anti-Patterns**
```typescript
// ‚ùå Don't use hard-coded colors
className="bg-white text-black border-gray-300"

// ‚ùå Don't use inline styles for colors
style={{ backgroundColor: '#ffffff', color: '#000000' }}

// ‚ùå Don't use fixed z-index values
className="z-50" // Use z-[1000] instead

// ‚ùå Don't use fixed dimensions
className="w-96 h-64" // Use responsive classes instead
```

### **Component Anti-Patterns**
```typescript
// ‚ùå Don't create components without proper types
export function BadComponent(props) {
  return <div>{props.children}</div>;
}

// ‚ùå Don't use useState without useCallback for handlers
const handleClick = () => setIsOpen(true); // Missing useCallback

// ‚ùå Don't forget accessibility
<button onClick={handleClick}>Click me</button> // Missing aria-label
```

## ‚úÖ **Best Practices to Follow**

### **Styling Best Practices**
```typescript
// ‚úÖ Use CSS variables for theming
className="bg-background text-foreground border-border"

// ‚úÖ Use responsive design
className="w-full sm:w-auto lg:w-96"

// ‚úÖ Use proper spacing
className="space-y-4 p-6"

// ‚úÖ Use semantic HTML
<button type="button" aria-label="Close modal">
  <X className="h-4 w-4" />
</button>
```

### **Component Best Practices**
```typescript
// ‚úÖ Use proper TypeScript interfaces
export interface ComponentProps {
  children?: React.ReactNode;
  className?: string;
  disabled?: boolean;
}

// ‚úÖ Use useCallback for event handlers
const handleClick = React.useCallback(() => {
  if (!disabled) setIsOpen(true);
}, [disabled]);

// ‚úÖ Use proper error boundaries
<ErrorBoundary fallback={<ErrorFallback />}>
  <Component />
</ErrorBoundary>
```

## üí° **Quick Tips**

1. **Always use CSS variables** for colors to ensure theme compatibility
2. **Use Lucide React icons** for consistency across the application
3. **Implement proper loading states** for better UX
4. **Add keyboard navigation** for accessibility
5. **Use useCallback** for event handlers to prevent unnecessary re-renders
6. **Implement responsive design** with proper breakpoints
7. **Add proper ARIA labels** for screen readers
8. **Use semantic HTML** for better accessibility
9. **Implement smooth transitions** for better user experience
10. **Follow the component structure** for consistency

This rule set ensures consistent, professional, and accessible frontend development with beautiful, modern UI/UX patterns! üéØ
```