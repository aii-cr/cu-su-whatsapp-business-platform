---
alwaysApply: false
---

# TECHNOLOGY STACK

* Framework: Next.js 15+ (App Router) using React Server Components by default; Client Components only for interactivity.
* Styling: Tailwind CSS with CSS variables (design tokens). Never hardcode hex in components.
* Theming: `next-themes` (class strategy) with Light/Dark themes aligned to WhatsApp-like UI.
* Forms: React Hook Form + Zod (schemas shared client/server).
* Data: Server Components for server data; TanStack Query for client mutations/cache and optimistic UI.
* State: Zustand for UI/ephemeral state; keep domain state colocated in features.
* Realtime: WebSocket (WSS) to FastAPI backend with auto-reconnect, heartbeats, and message routing.
* Monitoring: Sentry for errors + Web Vitals; Playwright for E2E; Vitest/Jest for unit tests.
* Code Quality: TypeScript strict; ESLint `next/core-web-vitals`; Prettier; no `@ts-ignore` unless justified.

# DESIGN SYSTEM & THEMING (MANDATORY)

## Color Palette (WCAG-AA–vetted base tokens)

**Light Theme**

* Primary: #2563eb (blue-600) — main brand / primary actions
* Secondary: #1d4ed8 (blue-700) — hover/active for primary
* Background: #ffffff (white)
* Surface: #f8fafc (slate-50)
* Text: #0f172a (slate-900)
* Text Secondary: #64748b (slate-500)
* Border: #e2e8f0 (slate-200)
* Success: #059669 (emerald-600)
* Warning: #d97706 (amber-600)
* Error: #dc2626 (red-600)

**Dark Theme**

* Primary: #3b82f6 (blue-500) — requires **dark** foreground to pass AA
* Secondary: #60a5fa (blue-400) — hover/active for primary
* Background: #0f172a (slate-900)
* Surface: #1e293b (slate-800)
* Text: #f8fafc (slate-50)
* Text Secondary: #94a3b8 (slate-400)
* Border: #334155 (slate-700)
* Success: #10b981 (emerald-500)
* Warning: #f59e0b (amber-500)
* Error: #ef4444 (red-500)

## CSS Variables (define in `src/app/globals.css`)

```css
:root {
  --primary: 37 99 235;
  --primary-foreground: 255 255 255;
  --secondary: 29 78 216;
  --background: 255 255 255;
  --foreground: 15 23 42;
  --surface: 248 250 252;
  --muted: 241 245 249;
  --muted-foreground: 100 116 139;
  --border: 226 232 240;
  --success: 5 150 105;
  --warning: 217 119 6;
  --error: 220 38 38;
}

.dark {
  --primary: 59 130 246;
  /* important: dark text over blue-500 to pass AA */
  --primary-foreground: 15 23 42;
  --secondary: 96 165 250;
  --background: 15 23 42;
  --foreground: 248 250 252;
  --surface: 30 41 59;
  --muted: 51 65 85;
  --muted-foreground: 148 163 184;
  --border: 51 65 85;
  --success: 16 185 129;
  --warning: 245 158 11;
  --error: 239 68 68;
}
```

## Color Contrast Requirements (MANDATORY)

* All text/interactive labels MUST meet **WCAG AA** (4.5:1 normal, 3:1 large).
* Primary buttons:

  * Light: bg `rgb(var(--primary))` + text `rgb(var(--primary-foreground))` → passes AA.
  * Dark: bg `rgb(var(--primary))` + text `rgb(var(--primary-foreground))` (**dark text**) → passes AA.
* Hover/active states remain AA-compliant: darker bg in light theme; lighter bg in dark theme; adjust `--primary-foreground` if needed.
* Focus states must be obvious (e.g., `ring-2 ring-offset-2` using token colors).
* Disabled states clearly distinguishable (opacity 0.5–0.6; maintain label readability).
* Status (success/warning/error) badges/buttons must meet AA in both themes.
* Every new component/variant MUST be reviewed in both themes; if it fails AA, **fix tokens**, not ad-hoc hex.

# ARCHITECTURE & STRUCTURE (CANONICAL; ALWAYS FOLLOW)

```txt
public/
  icons/
  images/
src/
  app/
    layout.tsx
    globals.css
    providers.tsx
    (auth)/
      layout.tsx
      login/page.tsx
    (dashboard)/
      layout.tsx
      conversations/
        page.tsx
        [id]/page.tsx
    api/
      conversations/start/route.ts
      whatsapp/messages/templates/route.ts
  components/
    ui/                    # Reusable primitives only (no feature logic)
      Avatar.tsx
      Badge.tsx
      Button.tsx
      Card.tsx
      Dialog.tsx
      Input.tsx
      Label.tsx
      Select.tsx
      Tabs.tsx
      Toast.tsx
    layout/                 # App shell & branding
      Header.tsx
      Sidebar.tsx
      BrandLogo.tsx
    feedback/
      EmptyState.tsx
      ErrorBoundary.tsx
      LoadingSpinner.tsx
    theme/
      ThemeProvider.tsx
      ThemeToggle.tsx
  features/
    auth/
      api/authApi.ts
      components/AuthWrapper.tsx
    conversations/
      api/conversationsApi.ts
      components/
        ConversationFilters.tsx
        ConversationListItem.tsx
        ConversationHeader.tsx
        ConversationView.tsx
        DayBanner.tsx
        MessageBubble.tsx
        MessageComposer.tsx
        TypingIndicator.tsx
      hooks/useConversations.ts
      models/conversation.ts
    messages/
      api/messagesApi.ts
      components/MessageList.tsx
      hooks/useMessages.ts
      hooks/useInfiniteMessages.ts
      models/message.ts
    departments/
      api/departmentsApi.ts
      models/department.ts
    users/
      hooks/useUsers.ts
  hooks/                    # Truly shared, generic hooks only
    useDebounce.ts
  lib/                      # Cross-cutting utilities (no feature knowledge)
    env.ts                  # Zod-validated env (fail fast)
    auth.ts
    config.ts
    branding.ts
    http.ts
    logger.ts
    store.ts
    timezone.ts
    utils.ts
    ws.ts                   # Single WebSocket client
  tests/
    unit/
    e2e/
  types/
    globals.d.ts
```

# PLACEMENT RULES

* Route Handlers live **only** under `src/app/api/**`.
* `components/ui` contains primitives only (accept `className`/`style`, forwardRef for inputs).
* Feature UI/hooks/api/models/schemas live under `src/features/<feature>/**`.
* Global providers in `src/app/providers.tsx` and wired in `src/app/layout.tsx`.
* Server-only helpers go under `src/server/**` or feature server folders; **never** import them into client components.

# REFACTOR & MIGRATION RULES (MANDATORY)

* Use a single app root: `src/app`. Delete any top-level `/app` duplicates.
* Move `/app/(api)/api/**` → `src/app/api/**` preserving URL paths; delete the `(api)` group.
* Remove duplicate pages/layouts/globals; keep only `src/app` versions.
* Keep one Next config (`next.config.mjs`). Delete `next.config.ts` and temp files (e.g., `tsconfig.json.save`).
* After any restructure, update **every** import/reference; run `tsc --noEmit` and `eslint --fix`; ensure Tailwind content globs include `src/**/*`.

# REUSABILITY & COMPOSITION (MANDATORY)

* Promote reuse when **proven**: if used in ≥3 places across features and feature-agnostic, promote to `components/ui` (or `components/layout` for shell). Refactor all imports; delete duplicates.
* Prefer composition over “mode flags”; use variant string unions or slots/children; avoid boolean prop explosions.
* APIs must be minimal and typed; forward refs for input-like primitives; always accept `className`/`style`.
* Before adding a new component/hook, search for an existing one; extend via composition when possible.

# ANTI-MONOLITH GUARDRAILS (MANDATORY)

* Max component file length: **200 LOC**; extract subcomponents/hooks when exceeded.
* Max hook length: **120 LOC**; max cyclomatic complexity: **10** per function.
* Max props per component: **10**; otherwise split into subcomponents or a typed config object.
* For multi-part components, use a folder (`Component/index.tsx`, `Component.Header.tsx`, `Component.Footer.tsx`, `types.ts`).
* Exceptions allowed for performance-critical or clarity-preserving cases with a one-line justification and follow-up task.

# WHATSAPP-SPECIFIC UI REQUIREMENTS (MANDATORY)

* **Chat bubbles**: user right-aligned; agent left-aligned; system centered/muted. Bubble radii 16–18px; tight vertical rhythm (4/8/12 grid); timestamps muted under each bubble.
* **Message status**: single tick (sent), double tick (delivered), double tick colored/read (read). Persist in lists and detail view.
* **Typing indicator**: animated dots aligned with sender row; `aria-live="polite"`.
* **Grouping**: day banners (Today/Yesterday/Date); collapse consecutive messages by same author.
* **Conversation list**: avatar/initials, name, last message preview, relative timestamp, unread badge count, online/offline dot, department/assignee/priority chips.
* **Composer**: text input with character limit indicator, file attachments (chips/thumbnails), emoji picker, quick templates, send button with loading/disabled; Enter sends, Shift+Enter newline.
* **Media**: `next/image`, aspect-ratio preserved, skeleton/fail states, downloads respect CSP and allowed MIME types.
* **Theme fidelity**: everything must look/read well in **both** themes, using **tokens** only.

# AUTHENTICATION & SESSION

* Cookie-based httpOnly sessions (secure, sameSite, proper expiry); rotate on login; never store tokens in localStorage.
* CSRF protection for unsafe methods; validate token in BFF Route Handlers.
* All authenticated requests go through **BFF** Route Handlers (never call upstream from client).
* `middleware.ts` guards protected routes and optional i18n; logout clears cookies.

# REALTIME (WEBSOCKET)

* Single reusable client in `lib/ws.ts`: WSS, exponential backoff, optional heartbeats, safe send queue, message-type routing.
* Feature hooks subscribe/unsubscribe to WS events and reconcile with TanStack Query caches (invalidate or silent update).
* Back-pressure: batch or drop low-priority events; keep UI responsive with long threads.

# SECURITY (MANDATORY, NON-BREAKING)

* CSP headers (avoid `'unsafe-eval'`); `connect-src` includes your API and WSS endpoints; `img-src` is `self data: https:`.
* HSTS + security headers (X-Frame-Options `DENY`; X-Content-Type-Options `nosniff`; Referrer-Policy `strict-origin-when-cross-origin`).
* Sanitize any HTML; avoid `dangerouslySetInnerHTML` unless sanitized.
* Zod validation on **all** route handlers (input) + typed outputs; reject unexpected fields.
* CSRF for state-changing ops; same-site cookies; double-submit or header token strategy.
* Rate limit BFF endpoints (IP + session); exponential penalties on abuse; never block essential receives.
* WebSocket auth via cookie/session at handshake; validate origin; drop unauthenticated connections.
* File uploads: validate MIME/size; strip EXIF; disallow executables; safe previews; scan if available.
* Logging: never log PII/secrets; redact phone numbers beyond last 4 digits; sample logs to reduce noise.
* RBAC/ABAC checks for actions (template send, department reassignment, exports); **fail closed**.

# PERFORMANCE

* Virtualize long lists (conversations/messages); stable keys by id (never indexes).
* `next/image` for media; lazy-load attachments; prefetch avatars in viewport.
* Server data: `cache: 'no-store'` for user-specific; use `revalidate`/`tags` for cacheable.
* Dynamic imports for heavy panels; Suspense boundaries per page/section.
* Memoize pure list items (`React.memo`) and handlers in hot lists; profile re-renders.

# ERROR HANDLING & MONITORING

* `ErrorBoundary` wraps client trees; standard `ErrorFallback` from `components/feedback`; log to Sentry in boundary + `instrumentation.ts`.
* Standard loading states via `components/feedback` (no bespoke spinners everywhere).
* Track Web Vitals and WS health; show reconnection toasts only when user action is impacted.

# TESTING

* **E2E (Playwright)**: auth, conversation list, message send/receive, templates, user admin, theme toggle, responsive breakpoints.
* **Unit**: components, hooks, utils, API clients, form schemas; mock network/WS.
* Coverage: ≥80% on critical paths; CI runs typecheck, lint, unit, and E2E smoke on PRs.

# DEPLOYMENT & CI/CD

* Build must pass TS strict, ESLint, unit tests, and E2E smoke.
* Tailwind content globs include `src/**/*`.
* Env vars validated at boot (`lib/env.ts` with Zod) — **fail fast**.
* Performance budgets for JS and LCP/INP on key routes; PR template calls out hot-path changes.

# AUTO-FIX EXPECTATIONS

* When violations occur, automatically move/rename/delete to comply with structure and rules.
* Update all imports/references; remove dead code; consolidate to a single `lib/ws.ts`.
* After fixes: run `tsc --noEmit` and `eslint --fix`; ensure routes/behavior remain unchanged.

# POST-REFACTOR ACCEPTANCE CRITERIA

* App compiles with zero TS errors; ESLint passes.
* Routes and APIs behave as before.
* `components/ui` contains primitives only; feature UI lives under `features/**`.
* **Both themes pass AA checks** for all buttons, text, and status indicators.
* Only one WebSocket client exists (`lib/ws.ts`); all imports updated.

# TECHNOLOGY STACK

* Framework: Next.js 15+ (App Router) using React Server Components by default; Client Components only for interactivity.
* Styling: Tailwind CSS with CSS variables (design tokens). Never hardcode hex in components.
* Theming: `next-themes` (class strategy) with Light/Dark themes aligned to WhatsApp-like UI.
* Forms: React Hook Form + Zod (schemas shared client/server).
* Data: Server Components for server data; TanStack Query for client mutations/cache and optimistic UI.
* State: Zustand for UI/ephemeral state; keep domain state colocated in features.
* Realtime: WebSocket (WSS) to FastAPI backend with auto-reconnect, heartbeats, and message routing.
* Monitoring: Sentry for errors + Web Vitals; Playwright for E2E; Vitest/Jest for unit tests.
* Code Quality: TypeScript strict; ESLint `next/core-web-vitals`; Prettier; no `@ts-ignore` unless justified.

# DESIGN SYSTEM & THEMING (MANDATORY)

## Color Palette (WCAG-AA–vetted base tokens)

**Light Theme**

* Primary: #2563eb (blue-600) — main brand / primary actions
* Secondary: #1d4ed8 (blue-700) — hover/active for primary
* Background: #ffffff (white)
* Surface: #f8fafc (slate-50)
* Text: #0f172a (slate-900)
* Text Secondary: #64748b (slate-500)
* Border: #e2e8f0 (slate-200)
* Success: #059669 (emerald-600)
* Warning: #d97706 (amber-600)
* Error: #dc2626 (red-600)

**Dark Theme**

* Primary: #3b82f6 (blue-500) — requires **dark** foreground to pass AA
* Secondary: #60a5fa (blue-400) — hover/active for primary
* Background: #0f172a (slate-900)
* Surface: #1e293b (slate-800)
* Text: #f8fafc (slate-50)
* Text Secondary: #94a3b8 (slate-400)
* Border: #334155 (slate-700)
* Success: #10b981 (emerald-500)
* Warning: #f59e0b (amber-500)
* Error: #ef4444 (red-500)

## CSS Variables (define in `src/app/globals.css`)

```css
:root {
  --primary: 37 99 235;
  --primary-foreground: 255 255 255;
  --secondary: 29 78 216;
  --background: 255 255 255;
  --foreground: 15 23 42;
  --surface: 248 250 252;
  --muted: 241 245 249;
  --muted-foreground: 100 116 139;
  --border: 226 232 240;
  --success: 5 150 105;
  --warning: 217 119 6;
  --error: 220 38 38;
}

.dark {
  --primary: 59 130 246;
  /* important: dark text over blue-500 to pass AA */
  --primary-foreground: 15 23 42;
  --secondary: 96 165 250;
  --background: 15 23 42;
  --foreground: 248 250 252;
  --surface: 30 41 59;
  --muted: 51 65 85;
  --muted-foreground: 148 163 184;
  --border: 51 65 85;
  --success: 16 185 129;
  --warning: 245 158 11;
  --error: 239 68 68;
}
```

## Color Contrast Requirements (MANDATORY)

* All text/interactive labels MUST meet **WCAG AA** (4.5:1 normal, 3:1 large).
* Primary buttons:

  * Light: bg `rgb(var(--primary))` + text `rgb(var(--primary-foreground))` → passes AA.
  * Dark: bg `rgb(var(--primary))` + text `rgb(var(--primary-foreground))` (**dark text**) → passes AA.
* Hover/active states remain AA-compliant: darker bg in light theme; lighter bg in dark theme; adjust `--primary-foreground` if needed.
* Focus states must be obvious (e.g., `ring-2 ring-offset-2` using token colors).
* Disabled states clearly distinguishable (opacity 0.5–0.6; maintain label readability).
* Status (success/warning/error) badges/buttons must meet AA in both themes.
* Every new component/variant MUST be reviewed in both themes; if it fails AA, **fix tokens**, not ad-hoc hex.

# ARCHITECTURE & STRUCTURE (CANONICAL; ALWAYS FOLLOW)

```txt
public/
  icons/
  images/
src/
  app/
    layout.tsx
    globals.css
    providers.tsx
    (auth)/
      layout.tsx
      login/page.tsx
    (dashboard)/
      layout.tsx
      conversations/
        page.tsx
        [id]/page.tsx
    api/
      conversations/start/route.ts
      whatsapp/messages/templates/route.ts
  components/
    ui/                    # Reusable primitives only (no feature logic)
      Avatar.tsx
      Badge.tsx
      Button.tsx
      Card.tsx
      Dialog.tsx
      Input.tsx
      Label.tsx
      Select.tsx
      Tabs.tsx
      Toast.tsx
    layout/                 # App shell & branding
      Header.tsx
      Sidebar.tsx
      BrandLogo.tsx
    feedback/
      EmptyState.tsx
      ErrorBoundary.tsx
      LoadingSpinner.tsx
    theme/
      ThemeProvider.tsx
      ThemeToggle.tsx
  features/
    auth/
      api/authApi.ts
      components/AuthWrapper.tsx
    conversations/
      api/conversationsApi.ts
      components/
        ConversationFilters.tsx
        ConversationListItem.tsx
        ConversationHeader.tsx
        ConversationView.tsx
        DayBanner.tsx
        MessageBubble.tsx
        MessageComposer.tsx
        TypingIndicator.tsx
      hooks/useConversations.ts
      models/conversation.ts
    messages/
      api/messagesApi.ts
      components/MessageList.tsx
      hooks/useMessages.ts
      hooks/useInfiniteMessages.ts
      models/message.ts
    departments/
      api/departmentsApi.ts
      models/department.ts
    users/
      hooks/useUsers.ts
  hooks/                    # Truly shared, generic hooks only
    useDebounce.ts
  lib/                      # Cross-cutting utilities (no feature knowledge)
    env.ts                  # Zod-validated env (fail fast)
    auth.ts
    config.ts
    branding.ts
    http.ts
    logger.ts
    store.ts
    timezone.ts
    utils.ts
    ws.ts                   # Single WebSocket client
  tests/
    unit/
    e2e/
  types/
    globals.d.ts
```

# PLACEMENT RULES

* Route Handlers live **only** under `src/app/api/**`.
* `components/ui` contains primitives only (accept `className`/`style`, forwardRef for inputs).
* Feature UI/hooks/api/models/schemas live under `src/features/<feature>/**`.
* Global providers in `src/app/providers.tsx` and wired in `src/app/layout.tsx`.
* Server-only helpers go under `src/server/**` or feature server folders; **never** import them into client components.

# REFACTOR & MIGRATION RULES (MANDATORY)

* Use a single app root: `src/app`. Delete any top-level `/app` duplicates.
* Move `/app/(api)/api/**` → `src/app/api/**` preserving URL paths; delete the `(api)` group.
* Remove duplicate pages/layouts/globals; keep only `src/app` versions.
* Keep one Next config (`next.config.mjs`). Delete `next.config.ts` and temp files (e.g., `tsconfig.json.save`).
* After any restructure, update **every** import/reference; run `tsc --noEmit` and `eslint --fix`; ensure Tailwind content globs include `src/**/*`.

# REUSABILITY & COMPOSITION (MANDATORY)

* Promote reuse when **proven**: if used in ≥3 places across features and feature-agnostic, promote to `components/ui` (or `components/layout` for shell). Refactor all imports; delete duplicates.
* Prefer composition over “mode flags”; use variant string unions or slots/children; avoid boolean prop explosions.
* APIs must be minimal and typed; forward refs for input-like primitives; always accept `className`/`style`.
* Before adding a new component/hook, search for an existing one; extend via composition when possible.

# ANTI-MONOLITH GUARDRAILS (MANDATORY)

* Max component file length: **200 LOC**; extract subcomponents/hooks when exceeded.
* Max hook length: **120 LOC**; max cyclomatic complexity: **10** per function.
* Max props per component: **10**; otherwise split into subcomponents or a typed config object.
* For multi-part components, use a folder (`Component/index.tsx`, `Component.Header.tsx`, `Component.Footer.tsx`, `types.ts`).
* Exceptions allowed for performance-critical or clarity-preserving cases with a one-line justification and follow-up task.

# WHATSAPP-SPECIFIC UI REQUIREMENTS (MANDATORY)

* **Chat bubbles**: user right-aligned; agent left-aligned; system centered/muted. Bubble radii 16–18px; tight vertical rhythm (4/8/12 grid); timestamps muted under each bubble.
* **Message status**: single tick (sent), double tick (delivered), double tick colored/read (read). Persist in lists and detail view.
* **Typing indicator**: animated dots aligned with sender row; `aria-live="polite"`.
* **Grouping**: day banners (Today/Yesterday/Date); collapse consecutive messages by same author.
* **Conversation list**: avatar/initials, name, last message preview, relative timestamp, unread badge count, online/offline dot, department/assignee/priority chips.
* **Composer**: text input with character limit indicator, file attachments (chips/thumbnails), emoji picker, quick templates, send button with loading/disabled; Enter sends, Shift+Enter newline.
* **Media**: `next/image`, aspect-ratio preserved, skeleton/fail states, downloads respect CSP and allowed MIME types.
* **Theme fidelity**: everything must look/read well in **both** themes, using **tokens** only.

# AUTHENTICATION & SESSION

* Cookie-based httpOnly sessions (secure, sameSite, proper expiry); rotate on login; never store tokens in localStorage.
* CSRF protection for unsafe methods; validate token in BFF Route Handlers.
* All authenticated requests go through **BFF** Route Handlers (never call upstream from client).
* `middleware.ts` guards protected routes and optional i18n; logout clears cookies.

# REALTIME (WEBSOCKET)

* Single reusable client in `lib/ws.ts`: WSS, exponential backoff, optional heartbeats, safe send queue, message-type routing.
* Feature hooks subscribe/unsubscribe to WS events and reconcile with TanStack Query caches (invalidate or silent update).
* Back-pressure: batch or drop low-priority events; keep UI responsive with long threads.

# SECURITY (MANDATORY, NON-BREAKING)

* CSP headers (avoid `'unsafe-eval'`); `connect-src` includes your API and WSS endpoints; `img-src` is `self data: https:`.
* HSTS + security headers (X-Frame-Options `DENY`; X-Content-Type-Options `nosniff`; Referrer-Policy `strict-origin-when-cross-origin`).
* Sanitize any HTML; avoid `dangerouslySetInnerHTML` unless sanitized.
* Zod validation on **all** route handlers (input) + typed outputs; reject unexpected fields.
* CSRF for state-changing ops; same-site cookies; double-submit or header token strategy.
* Rate limit BFF endpoints (IP + session); exponential penalties on abuse; never block essential receives.
* WebSocket auth via cookie/session at handshake; validate origin; drop unauthenticated connections.
* File uploads: validate MIME/size; strip EXIF; disallow executables; safe previews; scan if available.
* Logging: never log PII/secrets; redact phone numbers beyond last 4 digits; sample logs to reduce noise.
* RBAC/ABAC checks for actions (template send, department reassignment, exports); **fail closed**.

# PERFORMANCE

* Virtualize long lists (conversations/messages); stable keys by id (never indexes).
* `next/image` for media; lazy-load attachments; prefetch avatars in viewport.
* Server data: `cache: 'no-store'` for user-specific; use `revalidate`/`tags` for cacheable.
* Dynamic imports for heavy panels; Suspense boundaries per page/section.
* Memoize pure list items (`React.memo`) and handlers in hot lists; profile re-renders.

# ERROR HANDLING & MONITORING

* `ErrorBoundary` wraps client trees; standard `ErrorFallback` from `components/feedback`; log to Sentry in boundary + `instrumentation.ts`.
* Standard loading states via `components/feedback` (no bespoke spinners everywhere).
* Track Web Vitals and WS health; show reconnection toasts only when user action is impacted.

# TESTING

* **E2E (Playwright)**: auth, conversation list, message send/receive, templates, user admin, theme toggle, responsive breakpoints.
* **Unit**: components, hooks, utils, API clients, form schemas; mock network/WS.
* Coverage: ≥80% on critical paths; CI runs typecheck, lint, unit, and E2E smoke on PRs.

# DEPLOYMENT & CI/CD

* Build must pass TS strict, ESLint, unit tests, and E2E smoke.
* Tailwind content globs include `src/**/*`.
* Env vars validated at boot (`lib/env.ts` with Zod) — **fail fast**.
* Performance budgets for JS and LCP/INP on key routes; PR template calls out hot-path changes.

# AUTO-FIX EXPECTATIONS

* When violations occur, automatically move/rename/delete to comply with structure and rules.
* Update all imports/references; remove dead code; consolidate to a single `lib/ws.ts`.
* After fixes: run `tsc --noEmit` and `eslint --fix`; ensure routes/behavior remain unchanged.

# POST-REFACTOR ACCEPTANCE CRITERIA

* App compiles with zero TS errors; ESLint passes.
* Routes and APIs behave as before.
* `components/ui` contains primitives only; feature UI lives under `features/**`.
* **Both themes pass AA checks** for all buttons, text, and status indicators.
* Only one WebSocket client exists (`lib/ws.ts`); all imports updated.
